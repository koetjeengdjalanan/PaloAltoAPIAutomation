# coding: utf-8

"""
    Site Configuration

    List of APIs used to manage your site specific configuration attributes, and HA configuration for both branch and data center sites.

    The version of the OpenAPI document: Latest
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class SiteStatus(BaseModel):
    """
    SiteStatus
    """ # noqa: E501
    active_security_ps_id: Optional[StrictStr] = Field(default=None, description="Active Security Ps Id")
    desired_security_ps_id: Optional[StrictStr] = Field(default=None, description="Desired Security Ps Id: JsonIgnore(value = true) JsonIgnore(value = true) ")
    disabled: Optional[StrictBool] = Field(default=None, description="Disabled")
    disabled_reason: Optional[StrictStr] = Field(default=None, description="Disabled Reason: Size(max = 5000, DISABLED_REASON_INVALID_0001, min = 0) Size(max = 5000, DISABLED_REASON_INVALID_0001, min = 0) ")
    failed_security_ps_id: Optional[StrictStr] = Field(default=None, description="Failed Security Ps Id")
    id: Optional[StrictStr] = None
    inactive: Optional[StrictBool] = Field(default=None, description="Inactive")
    inactive_reason: Optional[StrictStr] = Field(default=None, description="Inactive Reason: Size(max = 5000, INACTIVE_REASON_INVALID_0001, min = 0) Size(max = 5000, INACTIVE_REASON_INVALID_0001, min = 0) ")
    last_failed_security_ps_update: Optional[StrictStr] = Field(default=None, description="Last Failed Security Ps Update")
    last_successful_security_ps_update: Optional[StrictStr] = Field(default=None, description="Last Successful Security Ps Update")
    region: Optional[StrictStr] = Field(default=None, description="Region")
    site_id: StrictStr = Field(description="Site Id: Digits(fraction = 0, integer = 50, SITEID_INVALID) NotNull Digits(fraction = 0, integer = 50, SITEID_INVALID) NotNull ")
    state: Optional[StrictStr] = Field(default=None, description="State: JsonIgnore(value = true) JsonIgnore(value = true) ")
    __properties: ClassVar[List[str]] = ["active_security_ps_id", "desired_security_ps_id", "disabled", "disabled_reason", "failed_security_ps_id", "id", "inactive", "inactive_reason", "last_failed_security_ps_update", "last_successful_security_ps_update", "region", "site_id", "state"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SiteStatus from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SiteStatus from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "active_security_ps_id": obj.get("active_security_ps_id"),
            "desired_security_ps_id": obj.get("desired_security_ps_id"),
            "disabled": obj.get("disabled"),
            "disabled_reason": obj.get("disabled_reason"),
            "failed_security_ps_id": obj.get("failed_security_ps_id"),
            "id": obj.get("id"),
            "inactive": obj.get("inactive"),
            "inactive_reason": obj.get("inactive_reason"),
            "last_failed_security_ps_update": obj.get("last_failed_security_ps_update"),
            "last_successful_security_ps_update": obj.get("last_successful_security_ps_update"),
            "region": obj.get("region"),
            "site_id": obj.get("site_id"),
            "state": obj.get("state")
        })
        return _obj


