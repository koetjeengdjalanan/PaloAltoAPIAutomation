# coding: utf-8

"""
    Site Configuration

    List of APIs used to manage your site specific configuration attributes, and HA configuration for both branch and data center sites.

    The version of the OpenAPI document: Latest
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ElementWANInterfaceState(BaseModel):
    """
    ElementWANInterfaceState
    """ # noqa: E501
    disabled: Optional[StrictBool] = Field(default=None, description="List the element wan interfaces in a disabled state. ")
    disabled_reason: Optional[StrictStr] = Field(default=None, description="List the reason for the disabled state. ")
    element_id: Optional[StrictStr] = Field(default=None, description="Element Id")
    id: Optional[StrictStr] = Field(default=None, description="The ID. ")
    inactive: Optional[StrictBool] = Field(default=None, description="Inactive")
    inactive_reason: Optional[StrictStr] = Field(default=None, description="List the reason for inactive state. ")
    operational: Optional[StrictBool] = Field(default=None, description="List the element wan interfaces that are operational. ")
    region: Optional[StrictStr] = Field(default=None, description="List the region of the element. ")
    site_id: StrictStr = Field(description="The ID of the site. ")
    site_wan_interface_id: Optional[StrictStr] = Field(default=None, description="The ID of the site wan interface. ")
    __properties: ClassVar[List[str]] = ["disabled", "disabled_reason", "element_id", "id", "inactive", "inactive_reason", "operational", "region", "site_id", "site_wan_interface_id"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ElementWANInterfaceState from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ElementWANInterfaceState from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "disabled": obj.get("disabled"),
            "disabled_reason": obj.get("disabled_reason"),
            "element_id": obj.get("element_id"),
            "id": obj.get("id"),
            "inactive": obj.get("inactive"),
            "inactive_reason": obj.get("inactive_reason"),
            "operational": obj.get("operational"),
            "region": obj.get("region"),
            "site_id": obj.get("site_id"),
            "site_wan_interface_id": obj.get("site_wan_interface_id")
        })
        return _obj


